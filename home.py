# main_app.py (‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå)
import customtkinter as ctk
from tkinter import messagebox

# --- Import ‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ---
from page_history import HistoryPage
from page_profile import ProfilePage
from page_add import AddPage
from page_dashboard import DashboardPage

# --- Import ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ---
from finance_notifier import notify_income, notify_expense

class App(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.geometry("900x600")
        self.resizable(0, 0)
        self.title("CASHMATH")

        # --- "‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß" ‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ ---
        # self.income = 0.0 # <--- ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß
        self.transactions = [] # <--- ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢

        self.create_main_app_view()

    def add_expense(self, category, amount, description):
        """‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"""
        transaction_data = {
            "type": "Expense", # <--- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            "category": category,
            "amount": float(amount),
            "desc": description
        }
        self.transactions.append(transaction_data)
        
        # --- ‡∏¢‡∏¥‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏™‡πà‡∏á description ‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô note) ---
        current_balance = self.calculate_balance()
        notify_expense(
            amount=float(amount), 
            category=category, 
            note=description, # <--- ‡∏™‡πà‡∏á description ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
            balance=current_balance
        )
        
        self.create_main_app_view()

    # <--- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å set_income ‡πÄ‡∏õ‡πá‡∏ô add_income ---
    def add_income(self, amount, description="Income"):
        """‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"""
        transaction_data = {
            "type": "Income", # <--- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            "category": "Income", # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            "amount": float(amount),
            "desc": description
        }
        self.transactions.append(transaction_data)

        # --- ‡∏¢‡∏¥‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ---
        current_balance = self.calculate_balance()
        notify_income(amount=float(amount), balance=current_balance)
        
        self.create_main_app_view()

    # <--- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç calculate_balance ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å list ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---
    def calculate_balance(self):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å transactions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        total_income = sum(t['amount'] for t in self.transactions if t.get('type') == 'Income')
        total_expense = sum(t['amount'] for t in self.transactions if t.get('type') == 'Expense')
        return total_income - total_expense

    def get_recent_transactions(self, count=5):
        return self.transactions[-count:]

    def load_page(self, page_name):
        for widget in self.content_frame.winfo_children():
            widget.destroy()
        
        if page_name == "Dashboard Home":
            DashboardPage(parent=self.content_frame, main_app=self)
        elif page_name == "Add Income/Expense":
            AddPage(parent=self.content_frame, main_app=self)
        elif page_name == "History":
            HistoryPage(parent=self.content_frame, main_app=self)
        elif page_name == "Profile":
            ProfilePage(parent=self.content_frame, main_app=self)

    def create_main_app_view(self):
        for widget in self.winfo_children():
            widget.destroy()

        dashboard_frame = ctk.CTkFrame(self, fg_color="#F8F8FF")
        dashboard_frame.pack(fill="both", expand=True)

        sidebar = ctk.CTkFrame(dashboard_frame, width=200, fg_color="#601E88")
        sidebar.pack(side="left", fill="y")
        ctk.CTkLabel(sidebar, text="‚ò∞ Menu", font=("Arial Bold", 18), text_color="white").pack(pady=20)

        self.content_frame = ctk.CTkFrame(dashboard_frame, fg_color="#F8F8FF")
        self.content_frame.pack(side="left", fill="both", expand=True)
        
        menu_items = [
            ("üè† Dashboard", "Dashboard Home"),
            ("‚ûï Add Income/Expense", "Add Income/Expense"),
            ("üìú History", "History"),
            ("üë§ Profile", "Profile"),
        ]

        for text, page in menu_items:
            ctk.CTkButton(sidebar, text=text, fg_color="#7733AA", hover_color="#9955CC",
                          command=lambda p=page: self.load_page(p)).pack(fill="x", pady=5, padx=10)
        
        ctk.CTkButton(sidebar, text="üö™ Exit", fg_color="#AA3333", hover_color="#CC4444",
                      command=self.quit_app).pack(fill="x", side="bottom", pady=20, padx=10)

        self.load_page("Dashboard Home")

    def quit_app(self):
        self.destroy()

if __name__ == "__main__":
    app = App()
    app.mainloop()